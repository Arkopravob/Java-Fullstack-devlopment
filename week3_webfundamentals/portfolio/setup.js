// Portfolio Setup Script
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('🚀 Portfolio Backend Setup');
console.log('==========================\n');

// Check if .env file exists
if (fs.existsSync('.env')) {
    console.log('⚠️  .env file already exists. Do you want to overwrite it? (y/N)');
    rl.question('> ', (answer) => {
        if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
            createEnvFile();
        } else {
            console.log('Setup cancelled. Using existing .env file.');
            checkDependencies();
        }
    });
} else {
    createEnvFile();
}

function createEnvFile() {
    console.log('\n📝 Creating .env configuration file...\n');

    const questions = [
        {
            key: 'PORT',
            question: 'Enter server port (default: 5000): ',
            default: '5000'
        },
        {
            key: 'NODE_ENV',
            question: 'Environment (development/production): ',
            default: 'development'
        },
        {
            key: 'MONGODB_URI',
            question: 'MongoDB connection string: ',
            default: 'mongodb://localhost:27017/portfolio'
        },
        {
            key: 'EMAIL_SERVICE',
            question: 'Email service (gmail/outlook): ',
            default: 'gmail'
        },
        {
            key: 'EMAIL_USER',
            question: 'Your email address: ',
            default: ''
        },
        {
            key: 'EMAIL_PASS',
            question: 'Your email password/app password: ',
            default: '',
            hidden: true
        },
        {
            key: 'JWT_SECRET',
            question: 'JWT secret key (generate a random string): ',
            default: generateRandomSecret()
        }
    ];

    const answers = {};

    function askQuestion(index) {
        if (index >= questions.length) {
            generateEnvFile(answers);
            return;
        }

        const question = questions[index];
        const isHidden = question.hidden;

        if (isHidden) {
            // For hidden inputs like passwords
            rl.stdoutMovable = true;
        }

        rl.question(question.question, (answer) => {
            answers[question.key] = answer || question.default;

            if (isHidden) {
                console.log(''); // Move to next line after hidden input
            }

            askQuestion(index + 1);
        });
    }

    askQuestion(0);
}

function generateEnvFile(answers) {
    console.log('\n📄 Generating .env file...\n');

    let envContent = '# Portfolio Backend Configuration\n';
    envContent += '# Generated by setup.js\n\n';

    Object.entries(answers).forEach(([key, value]) => {
        envContent += `${key}=${value}\n`;
    });

    // Add additional configuration
    envContent += '\n# Additional Configuration\n';
    envContent += 'FRONTEND_URL=http://localhost:8000\n';
    envContent += 'BCRYPT_ROUNDS=12\n';
    envContent += 'RATE_LIMIT_WINDOW_MS=900000\n';
    envContent += 'RATE_LIMIT_MAX_REQUESTS=100\n';
    envContent += 'MAX_FILE_SIZE=10485760\n';
    envContent += 'UPLOAD_PATH=./uploads\n';
    envContent += 'ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000\n';
    envContent += 'ADMIN_USERNAME=admin\n';
    envContent += 'ADMIN_PASSWORD=admin123\n';

    try {
        fs.writeFileSync('.env', envContent);
        console.log('✅ .env file created successfully!\n');
    } catch (error) {
        console.error('❌ Error creating .env file:', error.message);
        process.exit(1);
    }

    checkDependencies();
}

function checkDependencies() {
    console.log('📦 Checking dependencies...\n');

    if (fs.existsSync('package.json')) {
        console.log('✅ package.json found');

        if (fs.existsSync('node_modules')) {
            console.log('✅ Dependencies already installed');
            showNextSteps();
        } else {
            console.log('📥 Installing dependencies...\n');

            const { exec } = require('child_process');
            exec('npm install', (error, stdout, stderr) => {
                if (error) {
                    console.error('❌ Error installing dependencies:', error.message);
                    console.log('\n💡 Try running: npm install');
                    showNextSteps();
                    return;
                }

                console.log('✅ Dependencies installed successfully!\n');
                showNextSteps();
            });
        }
    } else {
        console.log('❌ package.json not found');
        console.log('Please make sure you\'re in the correct directory.');
        process.exit(1);
    }
}

function showNextSteps() {
    console.log('🎉 Setup Complete!');
    console.log('==================\n');

    console.log('📋 Next Steps:');
    console.log('1. 📧 Configure your email settings in .env file');
    console.log('2. 🗄️  Make sure MongoDB is running');
    console.log('3. 🚀 Start the backend server: npm run dev');
    console.log('4. 🌐 Start the frontend: npx http-server . -p 8000');
    console.log('5. 📊 Access admin dashboard: http://localhost:5000/admin.html\n');

    console.log('🔗 API Endpoints:');
    console.log('• Health Check: http://localhost:5000/api/health');
    console.log('• Contact Form: POST /api/contact');
    console.log('• Projects: GET /api/projects');
    console.log('• Certifications: GET /api/certifications\n');

    console.log('⚙️  Useful Commands:');
    console.log('• Start server: npm start');
    console.log('• Development mode: npm run dev');
    console.log('• Lint code: npm run lint');
    console.log('• Format code: npm run format\n');

    console.log('📁 Project Structure:');
    console.log('• server.js - Main backend server');
    console.log('• package.json - Node.js dependencies');
    console.log('• .env - Environment configuration');
    console.log('• admin.html - Admin dashboard');
    console.log('• index.html - Portfolio frontend\n');

    console.log('🔐 Security Notes:');
    console.log('• Change default admin password in .env');
    console.log('• Use strong JWT secret key');
    console.log('• Configure proper CORS origins for production\n');

    rl.close();
}

function generateRandomSecret() {
    return Math.random().toString(36).substring(2, 15) +
           Math.random().toString(36).substring(2, 15);
}

// Handle Ctrl+C gracefully
rl.on('SIGINT', () => {
    console.log('\n\n👋 Setup cancelled by user');
    process.exit(0);
});
